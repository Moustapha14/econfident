{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __assign, __awaiter, __generator } from \"tslib\";\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { PutObjectCommand, CreateMultipartUploadCommand, UploadPartCommand, CompleteMultipartUploadCommand, ListPartsCommand, AbortMultipartUploadCommand } from '@aws-sdk/client-s3';\nimport { SEND_UPLOAD_PROGRESS_EVENT, SEND_DOWNLOAD_PROGRESS_EVENT } from './axios-http-handler';\nimport * as events from 'events';\nimport { autoAdjustClockskewMiddleware, autoAdjustClockskewMiddlewareOptions, calculatePartSize, createPrefixMiddleware, createS3Client, prefixMiddlewareOptions, DEFAULT_PART_SIZE, DEFAULT_QUEUE_SIZE, MAX_OBJECT_SIZE } from '../common/S3ClientUtils';\nvar logger = new Logger('AWSS3ProviderManagedUpload');\nvar AWSS3ProviderManagedUpload = /** @class */function () {\n  function AWSS3ProviderManagedUpload(params, opts, emitter) {\n    this.opts = null;\n    this.completedParts = [];\n    this.partSize = DEFAULT_PART_SIZE;\n    // Progress reporting\n    this.bytesUploaded = 0;\n    this.totalBytesToUpload = 0;\n    this.emitter = null;\n    this.params = params;\n    this.opts = opts;\n    this.emitter = emitter;\n    this.s3client = this._createNewS3Client(opts, emitter);\n  }\n  AWSS3ProviderManagedUpload.prototype.upload = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var putObjectCommand, _a, numberOfPartsToUpload, parts, start, error_1;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _b.trys.push([0, 9,, 11]);\n            this.body = this.validateAndSanitizeBody(this.params.Body);\n            this.totalBytesToUpload = this.byteLength(this.body);\n            if (!(this.totalBytesToUpload <= DEFAULT_PART_SIZE)) return [3 /*break*/, 1];\n            // Multipart upload is not required. Upload the sanitized body as is\n            this.params.Body = this.body;\n            putObjectCommand = new PutObjectCommand(this.params);\n            return [2 /*return*/, this.s3client.send(putObjectCommand)];\n          case 1:\n            // Step 1: Determine appropriate part size.\n            this.partSize = calculatePartSize(this.totalBytesToUpload);\n            // Step 2: Initiate the multi part upload\n            _a = this;\n            return [4 /*yield*/, this.createMultiPartUpload()];\n          case 2:\n            // Step 2: Initiate the multi part upload\n            _a.uploadId = _b.sent();\n            numberOfPartsToUpload = Math.ceil(this.totalBytesToUpload / this.partSize);\n            parts = this.createParts();\n            start = 0;\n            _b.label = 3;\n          case 3:\n            if (!(start < numberOfPartsToUpload)) return [3 /*break*/, 6];\n            // Upload as many as `queueSize` parts simultaneously\n            return [4 /*yield*/, this.uploadParts(this.uploadId, parts.slice(start, start + DEFAULT_QUEUE_SIZE))];\n          case 4:\n            // Upload as many as `queueSize` parts simultaneously\n            _b.sent();\n            _b.label = 5;\n          case 5:\n            start += DEFAULT_QUEUE_SIZE;\n            return [3 /*break*/, 3];\n          case 6:\n            parts.map(function (part) {\n              _this.removeEventListener(part);\n            });\n            return [4 /*yield*/, this.finishMultiPartUpload(this.uploadId)];\n          case 7:\n            // Step 3: Finalize the upload such that S3 can recreate the file\n            return [2 /*return*/, _b.sent()];\n          case 8:\n            return [3 /*break*/, 11];\n          case 9:\n            error_1 = _b.sent();\n            // if any error is thrown, call cleanup\n            return [4 /*yield*/, this.cleanup(this.uploadId)];\n          case 10:\n            // if any error is thrown, call cleanup\n            _b.sent();\n            logger.error('Error. Cancelling the multipart upload.');\n            throw error_1;\n          case 11:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSS3ProviderManagedUpload.prototype.createParts = function () {\n    try {\n      var parts = [];\n      for (var bodyStart = 0; bodyStart < this.totalBytesToUpload;) {\n        var bodyEnd = Math.min(bodyStart + this.partSize, this.totalBytesToUpload);\n        parts.push({\n          bodyPart: this.body.slice(bodyStart, bodyEnd),\n          partNumber: parts.length + 1,\n          emitter: new events.EventEmitter(),\n          _lastUploadedBytes: 0\n        });\n        bodyStart += this.partSize;\n      }\n      return parts;\n    } catch (error) {\n      logger.error(error);\n      throw error;\n    }\n  };\n  AWSS3ProviderManagedUpload.prototype.createMultiPartUpload = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var createMultiPartUploadCommand, response, error_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            createMultiPartUploadCommand = new CreateMultipartUploadCommand(this.params);\n            return [4 /*yield*/, this.s3client.send(createMultiPartUploadCommand)];\n          case 1:\n            response = _a.sent();\n            logger.debug(response.UploadId);\n            return [2 /*return*/, response.UploadId];\n          case 2:\n            error_2 = _a.sent();\n            logger.error(error_2);\n            throw error_2;\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * @private Not to be extended outside of tests\n   * @VisibleFotTesting\n   */\n  AWSS3ProviderManagedUpload.prototype.uploadParts = function (uploadId, parts) {\n    return __awaiter(this, void 0, void 0, function () {\n      var allResults, i, error_3;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, Promise.all(parts.map(function (part) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var options, _a, Key, Bucket, SSECustomerAlgorithm, SSECustomerKey, SSECustomerKeyMD5, res;\n                return __generator(this, function (_b) {\n                  switch (_b.label) {\n                    case 0:\n                      this.setupEventListener(part);\n                      options = {\n                        emitter: part.emitter\n                      };\n                      _a = this.params, Key = _a.Key, Bucket = _a.Bucket, SSECustomerAlgorithm = _a.SSECustomerAlgorithm, SSECustomerKey = _a.SSECustomerKey, SSECustomerKeyMD5 = _a.SSECustomerKeyMD5;\n                      return [4 /*yield*/, this.s3client.send(new UploadPartCommand(__assign(__assign(__assign({\n                        PartNumber: part.partNumber,\n                        Body: part.bodyPart,\n                        UploadId: uploadId,\n                        Key: Key,\n                        Bucket: Bucket\n                      }, SSECustomerAlgorithm && {\n                        SSECustomerAlgorithm: SSECustomerAlgorithm\n                      }), SSECustomerKey && {\n                        SSECustomerKey: SSECustomerKey\n                      }), SSECustomerKeyMD5 && {\n                        SSECustomerKeyMD5: SSECustomerKeyMD5\n                      })), options)];\n                    case 1:\n                      res = _b.sent();\n                      return [2 /*return*/, res];\n                  }\n                });\n              });\n            }))];\n          case 1:\n            allResults = _a.sent();\n            // The order of resolved promises is the same as input promise order.\n            for (i = 0; i < allResults.length; i++) {\n              this.completedParts.push({\n                PartNumber: parts[i].partNumber,\n                ETag: allResults[i].ETag\n              });\n            }\n            return [3 /*break*/, 3];\n          case 2:\n            error_3 = _a.sent();\n            logger.error('Error happened while uploading a part. Cancelling the multipart upload');\n            throw error_3;\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSS3ProviderManagedUpload.prototype.finishMultiPartUpload = function (uploadId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var input, completeUploadCommand, data, error_4;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            input = {\n              Bucket: this.params.Bucket,\n              Key: this.params.Key,\n              UploadId: uploadId,\n              MultipartUpload: {\n                Parts: this.completedParts\n              }\n            };\n            completeUploadCommand = new CompleteMultipartUploadCommand(input);\n            _a.label = 1;\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, this.s3client.send(completeUploadCommand)];\n          case 2:\n            data = _a.sent();\n            return [2 /*return*/, data.Key];\n          case 3:\n            error_4 = _a.sent();\n            logger.error('Error happened while finishing the upload.');\n            throw error_4;\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSS3ProviderManagedUpload.prototype.cleanup = function (uploadId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var input, data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            // Reset this's state\n            this.body = null;\n            this.completedParts = [];\n            this.bytesUploaded = 0;\n            this.totalBytesToUpload = 0;\n            if (!uploadId) {\n              // This is a single part upload;\n              return [2 /*return*/];\n            }\n\n            input = {\n              Bucket: this.params.Bucket,\n              Key: this.params.Key,\n              UploadId: uploadId\n            };\n            return [4 /*yield*/, this.s3client.send(new AbortMultipartUploadCommand(input))];\n          case 1:\n            _a.sent();\n            return [4 /*yield*/, this.s3client.send(new ListPartsCommand(input))];\n          case 2:\n            data = _a.sent();\n            if (data && data.Parts && data.Parts.length > 0) {\n              throw new Error('Multipart upload clean up failed.');\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSS3ProviderManagedUpload.prototype.removeEventListener = function (part) {\n    part.emitter.removeAllListeners(SEND_UPLOAD_PROGRESS_EVENT);\n    part.emitter.removeAllListeners(SEND_DOWNLOAD_PROGRESS_EVENT);\n  };\n  AWSS3ProviderManagedUpload.prototype.setupEventListener = function (part) {\n    var _this = this;\n    part.emitter.on(SEND_UPLOAD_PROGRESS_EVENT, function (progress) {\n      _this.progressChanged(part.partNumber, progress.loaded - part._lastUploadedBytes);\n      part._lastUploadedBytes = progress.loaded;\n    });\n  };\n  AWSS3ProviderManagedUpload.prototype.progressChanged = function (partNumber, incrementalUpdate) {\n    this.bytesUploaded += incrementalUpdate;\n    this.emitter.emit(SEND_UPLOAD_PROGRESS_EVENT, {\n      loaded: this.bytesUploaded,\n      total: this.totalBytesToUpload,\n      part: partNumber,\n      key: this.params.Key\n    });\n  };\n  AWSS3ProviderManagedUpload.prototype.byteLength = function (input) {\n    if (input === null || input === undefined) return 0;\n    if (typeof input.byteLength === 'number') {\n      return input.byteLength;\n    } else if (typeof input.length === 'number') {\n      return input.length;\n    } else if (typeof input.size === 'number') {\n      return input.size;\n    } else if (typeof input.path === 'string') {\n      /* NodeJs Support\n      return require('fs').lstatSync(input.path).size;\n      */\n    } else {\n      throw new Error('Cannot determine length of ' + input);\n    }\n  };\n  AWSS3ProviderManagedUpload.prototype.validateAndSanitizeBody = function (body) {\n    var sanitizedBody = this.isGenericObject(body) ? JSON.stringify(body) : body;\n    /* TODO: streams and files for nodejs\n    if (\n        typeof body.path === 'string' &&\n        require('fs').lstatSync(body.path).size > 0\n    ) {\n        sanitizedBody = body;\n    } */\n    if (this.byteLength(sanitizedBody) > MAX_OBJECT_SIZE) {\n      throw new Error(\"File size bigger than S3 Object limit of 5TB, got \" + this.totalBytesToUpload + \" Bytes\");\n    }\n    return sanitizedBody;\n  };\n  AWSS3ProviderManagedUpload.prototype.isGenericObject = function (body) {\n    if (body !== null && typeof body === 'object') {\n      try {\n        return !(this.byteLength(body) >= 0);\n      } catch (error) {\n        // If we cannot determine the length of the body, consider it\n        // as a generic object and upload a stringified version of it\n        return true;\n      }\n    }\n    return false;\n  };\n  AWSS3ProviderManagedUpload.prototype._createNewS3Client = function (config, emitter) {\n    var s3client = createS3Client(config, emitter);\n    s3client.middlewareStack.add(createPrefixMiddleware(this.opts, this.params.Key), prefixMiddlewareOptions);\n    s3client.middlewareStack.add(autoAdjustClockskewMiddleware(s3client.config), autoAdjustClockskewMiddlewareOptions);\n    return s3client;\n  };\n  return AWSS3ProviderManagedUpload;\n}();\nexport { AWSS3ProviderManagedUpload };","map":{"version":3,"names":["__assign","__awaiter","__generator","ConsoleLogger","Logger","PutObjectCommand","CreateMultipartUploadCommand","UploadPartCommand","CompleteMultipartUploadCommand","ListPartsCommand","AbortMultipartUploadCommand","SEND_UPLOAD_PROGRESS_EVENT","SEND_DOWNLOAD_PROGRESS_EVENT","events","autoAdjustClockskewMiddleware","autoAdjustClockskewMiddlewareOptions","calculatePartSize","createPrefixMiddleware","createS3Client","prefixMiddlewareOptions","DEFAULT_PART_SIZE","DEFAULT_QUEUE_SIZE","MAX_OBJECT_SIZE","logger","AWSS3ProviderManagedUpload","params","opts","emitter","completedParts","partSize","bytesUploaded","totalBytesToUpload","s3client","_createNewS3Client","prototype","upload","putObjectCommand","_a","numberOfPartsToUpload","parts","start","error_1","_this","_b","label","trys","push","body","validateAndSanitizeBody","Body","byteLength","send","createMultiPartUpload","uploadId","sent","Math","ceil","createParts","uploadParts","slice","map","part","removeEventListener","finishMultiPartUpload","cleanup","error","bodyStart","bodyEnd","min","bodyPart","partNumber","length","EventEmitter","_lastUploadedBytes","createMultiPartUploadCommand","response","error_2","debug","UploadId","allResults","i","error_3","Promise","all","options","Key","Bucket","SSECustomerAlgorithm","SSECustomerKey","SSECustomerKeyMD5","res","setupEventListener","PartNumber","ETag","input","completeUploadCommand","data","error_4","MultipartUpload","Parts","Error","removeAllListeners","on","progress","progressChanged","loaded","incrementalUpdate","emit","total","key","undefined","size","path","sanitizedBody","isGenericObject","JSON","stringify","config","middlewareStack","add"],"sources":["/Users/macbook/Documents/projet ipssi/temp-repo-chatbot/frontend/node_modules/@aws-amplify/storage/lib-esm/providers/AWSS3ProviderManagedUpload.js"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __assign, __awaiter, __generator } from \"tslib\";\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { PutObjectCommand, CreateMultipartUploadCommand, UploadPartCommand, CompleteMultipartUploadCommand, ListPartsCommand, AbortMultipartUploadCommand, } from '@aws-sdk/client-s3';\nimport { SEND_UPLOAD_PROGRESS_EVENT, SEND_DOWNLOAD_PROGRESS_EVENT, } from './axios-http-handler';\nimport * as events from 'events';\nimport { autoAdjustClockskewMiddleware, autoAdjustClockskewMiddlewareOptions, calculatePartSize, createPrefixMiddleware, createS3Client, prefixMiddlewareOptions, DEFAULT_PART_SIZE, DEFAULT_QUEUE_SIZE, MAX_OBJECT_SIZE, } from '../common/S3ClientUtils';\nvar logger = new Logger('AWSS3ProviderManagedUpload');\nvar AWSS3ProviderManagedUpload = /** @class */ (function () {\n    function AWSS3ProviderManagedUpload(params, opts, emitter) {\n        this.opts = null;\n        this.completedParts = [];\n        this.partSize = DEFAULT_PART_SIZE;\n        // Progress reporting\n        this.bytesUploaded = 0;\n        this.totalBytesToUpload = 0;\n        this.emitter = null;\n        this.params = params;\n        this.opts = opts;\n        this.emitter = emitter;\n        this.s3client = this._createNewS3Client(opts, emitter);\n    }\n    AWSS3ProviderManagedUpload.prototype.upload = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var putObjectCommand, _a, numberOfPartsToUpload, parts, start, error_1;\n            var _this = this;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _b.trys.push([0, 9, , 11]);\n                        this.body = this.validateAndSanitizeBody(this.params.Body);\n                        this.totalBytesToUpload = this.byteLength(this.body);\n                        if (!(this.totalBytesToUpload <= DEFAULT_PART_SIZE)) return [3 /*break*/, 1];\n                        // Multipart upload is not required. Upload the sanitized body as is\n                        this.params.Body = this.body;\n                        putObjectCommand = new PutObjectCommand(this.params);\n                        return [2 /*return*/, this.s3client.send(putObjectCommand)];\n                    case 1:\n                        // Step 1: Determine appropriate part size.\n                        this.partSize = calculatePartSize(this.totalBytesToUpload);\n                        // Step 2: Initiate the multi part upload\n                        _a = this;\n                        return [4 /*yield*/, this.createMultiPartUpload()];\n                    case 2:\n                        // Step 2: Initiate the multi part upload\n                        _a.uploadId = _b.sent();\n                        numberOfPartsToUpload = Math.ceil(this.totalBytesToUpload / this.partSize);\n                        parts = this.createParts();\n                        start = 0;\n                        _b.label = 3;\n                    case 3:\n                        if (!(start < numberOfPartsToUpload)) return [3 /*break*/, 6];\n                        // Upload as many as `queueSize` parts simultaneously\n                        return [4 /*yield*/, this.uploadParts(this.uploadId, parts.slice(start, start + DEFAULT_QUEUE_SIZE))];\n                    case 4:\n                        // Upload as many as `queueSize` parts simultaneously\n                        _b.sent();\n                        _b.label = 5;\n                    case 5:\n                        start += DEFAULT_QUEUE_SIZE;\n                        return [3 /*break*/, 3];\n                    case 6:\n                        parts.map(function (part) {\n                            _this.removeEventListener(part);\n                        });\n                        return [4 /*yield*/, this.finishMultiPartUpload(this.uploadId)];\n                    case 7: \n                    // Step 3: Finalize the upload such that S3 can recreate the file\n                    return [2 /*return*/, _b.sent()];\n                    case 8: return [3 /*break*/, 11];\n                    case 9:\n                        error_1 = _b.sent();\n                        // if any error is thrown, call cleanup\n                        return [4 /*yield*/, this.cleanup(this.uploadId)];\n                    case 10:\n                        // if any error is thrown, call cleanup\n                        _b.sent();\n                        logger.error('Error. Cancelling the multipart upload.');\n                        throw error_1;\n                    case 11: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSS3ProviderManagedUpload.prototype.createParts = function () {\n        try {\n            var parts = [];\n            for (var bodyStart = 0; bodyStart < this.totalBytesToUpload;) {\n                var bodyEnd = Math.min(bodyStart + this.partSize, this.totalBytesToUpload);\n                parts.push({\n                    bodyPart: this.body.slice(bodyStart, bodyEnd),\n                    partNumber: parts.length + 1,\n                    emitter: new events.EventEmitter(),\n                    _lastUploadedBytes: 0,\n                });\n                bodyStart += this.partSize;\n            }\n            return parts;\n        }\n        catch (error) {\n            logger.error(error);\n            throw error;\n        }\n    };\n    AWSS3ProviderManagedUpload.prototype.createMultiPartUpload = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var createMultiPartUploadCommand, response, error_2;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        createMultiPartUploadCommand = new CreateMultipartUploadCommand(this.params);\n                        return [4 /*yield*/, this.s3client.send(createMultiPartUploadCommand)];\n                    case 1:\n                        response = _a.sent();\n                        logger.debug(response.UploadId);\n                        return [2 /*return*/, response.UploadId];\n                    case 2:\n                        error_2 = _a.sent();\n                        logger.error(error_2);\n                        throw error_2;\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * @private Not to be extended outside of tests\n     * @VisibleFotTesting\n     */\n    AWSS3ProviderManagedUpload.prototype.uploadParts = function (uploadId, parts) {\n        return __awaiter(this, void 0, void 0, function () {\n            var allResults, i, error_3;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, Promise.all(parts.map(function (part) { return __awaiter(_this, void 0, void 0, function () {\n                                var options, _a, Key, Bucket, SSECustomerAlgorithm, SSECustomerKey, SSECustomerKeyMD5, res;\n                                return __generator(this, function (_b) {\n                                    switch (_b.label) {\n                                        case 0:\n                                            this.setupEventListener(part);\n                                            options = { emitter: part.emitter };\n                                            _a = this.params, Key = _a.Key, Bucket = _a.Bucket, SSECustomerAlgorithm = _a.SSECustomerAlgorithm, SSECustomerKey = _a.SSECustomerKey, SSECustomerKeyMD5 = _a.SSECustomerKeyMD5;\n                                            return [4 /*yield*/, this.s3client.send(new UploadPartCommand(__assign(__assign(__assign({ PartNumber: part.partNumber, Body: part.bodyPart, UploadId: uploadId, Key: Key,\n                                                    Bucket: Bucket }, (SSECustomerAlgorithm && { SSECustomerAlgorithm: SSECustomerAlgorithm })), (SSECustomerKey && { SSECustomerKey: SSECustomerKey })), (SSECustomerKeyMD5 && { SSECustomerKeyMD5: SSECustomerKeyMD5 }))), options)];\n                                        case 1:\n                                            res = _b.sent();\n                                            return [2 /*return*/, res];\n                                    }\n                                });\n                            }); }))];\n                    case 1:\n                        allResults = _a.sent();\n                        // The order of resolved promises is the same as input promise order.\n                        for (i = 0; i < allResults.length; i++) {\n                            this.completedParts.push({\n                                PartNumber: parts[i].partNumber,\n                                ETag: allResults[i].ETag,\n                            });\n                        }\n                        return [3 /*break*/, 3];\n                    case 2:\n                        error_3 = _a.sent();\n                        logger.error('Error happened while uploading a part. Cancelling the multipart upload');\n                        throw error_3;\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSS3ProviderManagedUpload.prototype.finishMultiPartUpload = function (uploadId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var input, completeUploadCommand, data, error_4;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        input = {\n                            Bucket: this.params.Bucket,\n                            Key: this.params.Key,\n                            UploadId: uploadId,\n                            MultipartUpload: { Parts: this.completedParts },\n                        };\n                        completeUploadCommand = new CompleteMultipartUploadCommand(input);\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, this.s3client.send(completeUploadCommand)];\n                    case 2:\n                        data = _a.sent();\n                        return [2 /*return*/, data.Key];\n                    case 3:\n                        error_4 = _a.sent();\n                        logger.error('Error happened while finishing the upload.');\n                        throw error_4;\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSS3ProviderManagedUpload.prototype.cleanup = function (uploadId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var input, data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        // Reset this's state\n                        this.body = null;\n                        this.completedParts = [];\n                        this.bytesUploaded = 0;\n                        this.totalBytesToUpload = 0;\n                        if (!uploadId) {\n                            // This is a single part upload;\n                            return [2 /*return*/];\n                        }\n                        input = {\n                            Bucket: this.params.Bucket,\n                            Key: this.params.Key,\n                            UploadId: uploadId,\n                        };\n                        return [4 /*yield*/, this.s3client.send(new AbortMultipartUploadCommand(input))];\n                    case 1:\n                        _a.sent();\n                        return [4 /*yield*/, this.s3client.send(new ListPartsCommand(input))];\n                    case 2:\n                        data = _a.sent();\n                        if (data && data.Parts && data.Parts.length > 0) {\n                            throw new Error('Multipart upload clean up failed.');\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSS3ProviderManagedUpload.prototype.removeEventListener = function (part) {\n        part.emitter.removeAllListeners(SEND_UPLOAD_PROGRESS_EVENT);\n        part.emitter.removeAllListeners(SEND_DOWNLOAD_PROGRESS_EVENT);\n    };\n    AWSS3ProviderManagedUpload.prototype.setupEventListener = function (part) {\n        var _this = this;\n        part.emitter.on(SEND_UPLOAD_PROGRESS_EVENT, function (progress) {\n            _this.progressChanged(part.partNumber, progress.loaded - part._lastUploadedBytes);\n            part._lastUploadedBytes = progress.loaded;\n        });\n    };\n    AWSS3ProviderManagedUpload.prototype.progressChanged = function (partNumber, incrementalUpdate) {\n        this.bytesUploaded += incrementalUpdate;\n        this.emitter.emit(SEND_UPLOAD_PROGRESS_EVENT, {\n            loaded: this.bytesUploaded,\n            total: this.totalBytesToUpload,\n            part: partNumber,\n            key: this.params.Key,\n        });\n    };\n    AWSS3ProviderManagedUpload.prototype.byteLength = function (input) {\n        if (input === null || input === undefined)\n            return 0;\n        if (typeof input.byteLength === 'number') {\n            return input.byteLength;\n        }\n        else if (typeof input.length === 'number') {\n            return input.length;\n        }\n        else if (typeof input.size === 'number') {\n            return input.size;\n        }\n        else if (typeof input.path === 'string') {\n            /* NodeJs Support\n            return require('fs').lstatSync(input.path).size;\n            */\n        }\n        else {\n            throw new Error('Cannot determine length of ' + input);\n        }\n    };\n    AWSS3ProviderManagedUpload.prototype.validateAndSanitizeBody = function (body) {\n        var sanitizedBody = this.isGenericObject(body)\n            ? JSON.stringify(body)\n            : body;\n        /* TODO: streams and files for nodejs\n        if (\n            typeof body.path === 'string' &&\n            require('fs').lstatSync(body.path).size > 0\n        ) {\n            sanitizedBody = body;\n        } */\n        if (this.byteLength(sanitizedBody) > MAX_OBJECT_SIZE) {\n            throw new Error(\"File size bigger than S3 Object limit of 5TB, got \" + this.totalBytesToUpload + \" Bytes\");\n        }\n        return sanitizedBody;\n    };\n    AWSS3ProviderManagedUpload.prototype.isGenericObject = function (body) {\n        if (body !== null && typeof body === 'object') {\n            try {\n                return !(this.byteLength(body) >= 0);\n            }\n            catch (error) {\n                // If we cannot determine the length of the body, consider it\n                // as a generic object and upload a stringified version of it\n                return true;\n            }\n        }\n        return false;\n    };\n    AWSS3ProviderManagedUpload.prototype._createNewS3Client = function (config, emitter) {\n        var s3client = createS3Client(config, emitter);\n        s3client.middlewareStack.add(createPrefixMiddleware(this.opts, this.params.Key), prefixMiddlewareOptions);\n        s3client.middlewareStack.add(autoAdjustClockskewMiddleware(s3client.config), autoAdjustClockskewMiddlewareOptions);\n        return s3client;\n    };\n    return AWSS3ProviderManagedUpload;\n}());\nexport { AWSS3ProviderManagedUpload };\n//# sourceMappingURL=AWSS3ProviderManagedUpload.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}