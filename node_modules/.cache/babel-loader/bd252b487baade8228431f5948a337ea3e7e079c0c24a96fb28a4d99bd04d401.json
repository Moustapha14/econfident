{"ast":null,"code":"import { __awaiter, __generator, __read, __spread } from \"tslib\";\nimport { UploadPartCommand, CompleteMultipartUploadCommand, AbortMultipartUploadCommand, ListPartsCommand, CreateMultipartUploadCommand, ListObjectsV2Command } from '@aws-sdk/client-s3';\nimport axios from 'axios';\nimport { Logger } from '@aws-amplify/core';\nimport { calculatePartSize, DEFAULT_PART_SIZE, DEFAULT_QUEUE_SIZE, MAX_OBJECT_SIZE } from '../common/S3ClientUtils';\nimport { byteLength, isFile } from '../common/StorageUtils';\nimport { AWSS3ProviderUploadErrorStrings } from '../common/StorageErrorStrings';\nimport { SET_CONTENT_LENGTH_HEADER, UPLOADS_STORAGE_KEY } from '../common/StorageConstants';\nvar logger = new Logger('AWSS3UploadTask');\nexport var AWSS3UploadTaskState;\n(function (AWSS3UploadTaskState) {\n  AWSS3UploadTaskState[AWSS3UploadTaskState[\"INIT\"] = 0] = \"INIT\";\n  AWSS3UploadTaskState[AWSS3UploadTaskState[\"IN_PROGRESS\"] = 1] = \"IN_PROGRESS\";\n  AWSS3UploadTaskState[AWSS3UploadTaskState[\"PAUSED\"] = 2] = \"PAUSED\";\n  AWSS3UploadTaskState[AWSS3UploadTaskState[\"CANCELLED\"] = 3] = \"CANCELLED\";\n  AWSS3UploadTaskState[AWSS3UploadTaskState[\"COMPLETED\"] = 4] = \"COMPLETED\";\n})(AWSS3UploadTaskState || (AWSS3UploadTaskState = {}));\nexport var TaskEvents;\n(function (TaskEvents) {\n  TaskEvents[\"CANCEL\"] = \"cancel\";\n  TaskEvents[\"UPLOAD_COMPLETE\"] = \"uploadComplete\";\n  TaskEvents[\"UPLOAD_PROGRESS\"] = \"uploadPartProgress\";\n  TaskEvents[\"ERROR\"] = \"error\";\n})(TaskEvents || (TaskEvents = {}));\nfunction comparePartNumber(a, b) {\n  return a.PartNumber - b.PartNumber;\n}\nvar AWSS3UploadTask = /** @class */function () {\n  function AWSS3UploadTask(_a) {\n    var s3Client = _a.s3Client,\n      file = _a.file,\n      emitter = _a.emitter,\n      storage = _a.storage,\n      params = _a.params,\n      level = _a.level,\n      prefixPromise = _a.prefixPromise;\n    this.queueSize = DEFAULT_QUEUE_SIZE;\n    this.partSize = DEFAULT_PART_SIZE;\n    this.inProgress = [];\n    this.completedParts = [];\n    this.queued = [];\n    this.bytesUploaded = 0;\n    this.totalBytes = 0;\n    this.state = AWSS3UploadTaskState.INIT;\n    this.prefixPromise = prefixPromise;\n    this.s3client = s3Client;\n    this.s3client.middlewareStack.remove(SET_CONTENT_LENGTH_HEADER);\n    this.storage = storage;\n    this.storageSync = Promise.resolve();\n    if (typeof this.storage['sync'] === 'function') {\n      this.storageSync = this.storage['sync']();\n    }\n    this.params = params;\n    this.file = file;\n    this.totalBytes = this.file.size;\n    this.bytesUploaded = 0;\n    this.emitter = emitter;\n    this.queued = [];\n    this.fileId = this._getFileId(level);\n    this._validateParams();\n    // event emitter will re-throw an error if an event emits an error unless there's a listener, attaching a no-op\n    // function to it unless user adds their own onError callback\n    this.emitter.on(TaskEvents.ERROR, function () {});\n  }\n  Object.defineProperty(AWSS3UploadTask.prototype, \"percent\", {\n    get: function () {\n      return this.bytesUploaded / this.totalBytes * 100;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(AWSS3UploadTask.prototype, \"isInProgress\", {\n    get: function () {\n      return this.state === AWSS3UploadTaskState.IN_PROGRESS;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  AWSS3UploadTask.prototype._listSingleFile = function (_a) {\n    var key = _a.key,\n      bucket = _a.bucket;\n    return __awaiter(this, void 0, void 0, function () {\n      var listObjectRes, _b, Contents, prefix, obj;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            return [4 /*yield*/, this.s3client.send(new ListObjectsV2Command({\n              Bucket: bucket,\n              Prefix: key\n            }))];\n          case 1:\n            listObjectRes = _c.sent();\n            _b = listObjectRes.Contents, Contents = _b === void 0 ? [] : _b;\n            return [4 /*yield*/, this.prefixPromise];\n          case 2:\n            prefix = _c.sent();\n            obj = Contents.find(function (o) {\n              return o.Key === \"\" + prefix + key;\n            });\n            return [2 /*return*/, obj];\n        }\n      });\n    });\n  };\n  AWSS3UploadTask.prototype._getFileId = function (level) {\n    // We should check if it's a File first because File is also instance of a Blob\n    if (isFile(this.file)) {\n      return [this.file.name, this.file.lastModified, this.file.size, this.file.type, this.params.Bucket, level, this.params.Key].join('-');\n    } else {\n      return [this.file.size, this.file.type, this.params.Bucket, level, this.params.Key].join('-');\n    }\n  };\n  AWSS3UploadTask.prototype._findCachedUploadParts = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var uploadRequests, cachedUploadFileData, listPartsOutput;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._listCachedUploadTasks()];\n          case 1:\n            uploadRequests = _a.sent();\n            if (Object.keys(uploadRequests).length === 0 || !Object.prototype.hasOwnProperty.call(uploadRequests, this.fileId)) {\n              return [2 /*return*/, {\n                parts: [],\n                uploadId: null\n              }];\n            }\n            cachedUploadFileData = uploadRequests[this.fileId];\n            cachedUploadFileData.lastTouched = Date.now();\n            this.storage.setItem(UPLOADS_STORAGE_KEY, JSON.stringify(uploadRequests));\n            return [4 /*yield*/, this.s3client.send(new ListPartsCommand({\n              Bucket: this.params.Bucket,\n              Key: this.params.Key,\n              UploadId: cachedUploadFileData.uploadId\n            }))];\n          case 2:\n            listPartsOutput = _a.sent();\n            return [2 /*return*/, {\n              parts: listPartsOutput.Parts || [],\n              uploadId: cachedUploadFileData.uploadId\n            }];\n        }\n      });\n    });\n  };\n  AWSS3UploadTask.prototype._emitEvent = function (event, payload) {\n    this.emitter.emit(event, payload);\n  };\n  AWSS3UploadTask.prototype._validateParams = function () {\n    if (this.totalBytes > MAX_OBJECT_SIZE) {\n      throw new Error(\"File size bigger than S3 Object limit of 5TB, got \" + this.totalBytes + \" Bytes\");\n    }\n  };\n  AWSS3UploadTask.prototype._listCachedUploadTasks = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var tasks;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.storageSync];\n          case 1:\n            _a.sent();\n            tasks = this.storage.getItem(UPLOADS_STORAGE_KEY) || '{}';\n            return [2 /*return*/, JSON.parse(tasks)];\n        }\n      });\n    });\n  };\n  AWSS3UploadTask.prototype._cache = function (fileMetadata) {\n    return __awaiter(this, void 0, void 0, function () {\n      var uploadRequests;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._listCachedUploadTasks()];\n          case 1:\n            uploadRequests = _a.sent();\n            uploadRequests[this.fileId] = fileMetadata;\n            this.storage.setItem(UPLOADS_STORAGE_KEY, JSON.stringify(uploadRequests));\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSS3UploadTask.prototype._isCached = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, _b;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _b = (_a = Object.prototype.hasOwnProperty).call;\n            return [4 /*yield*/, this._listCachedUploadTasks()];\n          case 1:\n            return [2 /*return*/, _b.apply(_a, [_c.sent(), this.fileId])];\n        }\n      });\n    });\n  };\n  AWSS3UploadTask.prototype._removeFromCache = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var uploadRequests;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._listCachedUploadTasks()];\n          case 1:\n            uploadRequests = _a.sent();\n            delete uploadRequests[this.fileId];\n            this.storage.setItem(UPLOADS_STORAGE_KEY, JSON.stringify(uploadRequests));\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSS3UploadTask.prototype._onPartUploadCompletion = function (_a) {\n    var eTag = _a.eTag,\n      partNumber = _a.partNumber,\n      chunk = _a.chunk;\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_b) {\n        this.completedParts.push({\n          ETag: eTag,\n          PartNumber: partNumber\n        });\n        this.bytesUploaded += byteLength(chunk);\n        this._emitEvent(TaskEvents.UPLOAD_PROGRESS, {\n          loaded: this.bytesUploaded,\n          total: this.totalBytes\n        });\n        // Remove the completed item from the inProgress array\n        this.inProgress = this.inProgress.filter(function (job) {\n          return job.uploadPartInput.PartNumber !== partNumber;\n        });\n        if (this.queued.length && this.state !== AWSS3UploadTaskState.PAUSED) this._startNextPart();\n        if (this._isDone()) this._completeUpload();\n        return [2 /*return*/];\n      });\n    });\n  };\n\n  AWSS3UploadTask.prototype._completeUpload = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var err_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 3,, 4]);\n            return [4 /*yield*/, this.s3client.send(new CompleteMultipartUploadCommand({\n              Bucket: this.params.Bucket,\n              Key: this.params.Key,\n              UploadId: this.uploadId,\n              MultipartUpload: {\n                // Parts are not always completed in order, we need to manually sort them\n                Parts: this.completedParts.sort(comparePartNumber)\n              }\n            }))];\n          case 1:\n            _a.sent();\n            return [4 /*yield*/, this._verifyFileSize()];\n          case 2:\n            _a.sent();\n            this._emitEvent(TaskEvents.UPLOAD_COMPLETE, {\n              key: this.params.Key\n            });\n            this._removeFromCache();\n            this.state = AWSS3UploadTaskState.COMPLETED;\n            return [3 /*break*/, 4];\n          case 3:\n            err_1 = _a.sent();\n            logger.error('error completing upload', err_1);\n            this._emitEvent(TaskEvents.ERROR, err_1);\n            return [3 /*break*/, 4];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSS3UploadTask.prototype._makeUploadPartRequest = function (input, cancelTokenSource) {\n    return __awaiter(this, void 0, void 0, function () {\n      var res, err_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 3,, 4]);\n            return [4 /*yield*/, this.s3client.send(new UploadPartCommand(input), {\n              cancelTokenSource: cancelTokenSource\n            })];\n          case 1:\n            res = _a.sent();\n            return [4 /*yield*/, this._onPartUploadCompletion({\n              eTag: res.ETag,\n              partNumber: input.PartNumber,\n              chunk: input.Body\n            })];\n          case 2:\n            _a.sent();\n            return [3 /*break*/, 4];\n          case 3:\n            err_2 = _a.sent();\n            if (this.state === AWSS3UploadTaskState.PAUSED) {\n              logger.log('upload paused');\n            } else if (this.state === AWSS3UploadTaskState.CANCELLED) {\n              logger.log('upload aborted');\n            } else {\n              logger.error('error starting next part of upload: ', err_2);\n            }\n            // axios' cancel will also throw an error, however we don't need to emit an event in that case as it's an\n            // expected behavior\n            if (!axios.isCancel(err_2) && err_2.message !== AWSS3ProviderUploadErrorStrings.UPLOAD_PAUSED_MESSAGE) {\n              this._emitEvent(TaskEvents.ERROR, err_2);\n              this.pause();\n            }\n            return [3 /*break*/, 4];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSS3UploadTask.prototype._startNextPart = function () {\n    if (this.queued.length > 0 && this.state !== AWSS3UploadTaskState.PAUSED) {\n      var cancelTokenSource = axios.CancelToken.source();\n      var nextPart = this.queued.shift();\n      this.inProgress.push({\n        uploadPartInput: nextPart,\n        s3Request: this._makeUploadPartRequest(nextPart, cancelTokenSource),\n        cancel: cancelTokenSource.cancel\n      });\n    }\n  };\n  /**\n   * Verify on S3 side that the file size matches the one on the client side.\n   *\n   * @async\n   * @throws throws an error if the file size does not match between local copy of the file and the file on s3.\n   */\n  AWSS3UploadTask.prototype._verifyFileSize = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var valid, obj, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n            return [4 /*yield*/, this._listSingleFile({\n              key: this.params.Key,\n              bucket: this.params.Bucket\n            })];\n          case 1:\n            obj = _a.sent();\n            valid = Boolean(obj && obj.Size === this.file.size);\n            return [3 /*break*/, 3];\n          case 2:\n            e_1 = _a.sent();\n            logger.log('Could not get file on s3 for size matching: ', e_1);\n            // Don't gate verification on auth or other errors\n            // unrelated to file size verification\n            return [2 /*return*/];\n          case 3:\n            if (!valid) {\n              throw new Error('File size does not match between local file and file on s3');\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSS3UploadTask.prototype._isDone = function () {\n    return !this.queued.length && !this.inProgress.length && this.bytesUploaded === this.totalBytes;\n  };\n  AWSS3UploadTask.prototype._createParts = function () {\n    var size = this.file.size;\n    var parts = [];\n    for (var bodyStart = 0; bodyStart < size;) {\n      var bodyEnd = Math.min(bodyStart + this.partSize, size);\n      parts.push({\n        Body: this.file.slice(bodyStart, bodyEnd),\n        Key: this.params.Key,\n        Bucket: this.params.Bucket,\n        PartNumber: parts.length + 1,\n        UploadId: this.uploadId\n      });\n      bodyStart += this.partSize;\n    }\n    return parts;\n  };\n  AWSS3UploadTask.prototype._initCachedUploadParts = function (cachedParts) {\n    this.bytesUploaded += cachedParts.reduce(function (acc, part) {\n      return acc + part.Size;\n    }, 0);\n    // Find the set of part numbers that have already been uploaded\n    var uploadedPartNumSet = new Set(cachedParts.map(function (part) {\n      return part.PartNumber;\n    }));\n    this.queued = this.queued.filter(function (part) {\n      return !uploadedPartNumSet.has(part.PartNumber);\n    });\n    this.completedParts = cachedParts.map(function (part) {\n      return {\n        PartNumber: part.PartNumber,\n        ETag: part.ETag\n      };\n    });\n    this._emitEvent(TaskEvents.UPLOAD_PROGRESS, {\n      loaded: this.bytesUploaded,\n      total: this.totalBytes\n    });\n  };\n  AWSS3UploadTask.prototype._initMultipartUpload = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var res;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.s3client.send(new CreateMultipartUploadCommand(this.params))];\n          case 1:\n            res = _a.sent();\n            this._cache({\n              uploadId: res.UploadId,\n              lastTouched: Date.now(),\n              bucket: this.params.Bucket,\n              key: this.params.Key,\n              fileName: this.file instanceof File ? this.file.name : ''\n            });\n            return [2 /*return*/, res.UploadId];\n        }\n      });\n    });\n  };\n  AWSS3UploadTask.prototype._initializeUploadTask = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, parts, uploadId, uploadId, err_3;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            this.state = AWSS3UploadTaskState.IN_PROGRESS;\n            this.partSize = calculatePartSize(this.totalBytes);\n            _b.label = 1;\n          case 1:\n            _b.trys.push([1, 7,, 8]);\n            return [4 /*yield*/, this._isCached()];\n          case 2:\n            if (!_b.sent()) return [3 /*break*/, 4];\n            return [4 /*yield*/, this._findCachedUploadParts()];\n          case 3:\n            _a = _b.sent(), parts = _a.parts, uploadId = _a.uploadId;\n            this.uploadId = uploadId;\n            this.queued = this._createParts();\n            this._initCachedUploadParts(parts);\n            this._startUpload();\n            return [3 /*break*/, 6];\n          case 4:\n            if (!!this.uploadId) return [3 /*break*/, 6];\n            return [4 /*yield*/, this._initMultipartUpload()];\n          case 5:\n            uploadId = _b.sent();\n            this.uploadId = uploadId;\n            this.queued = this._createParts();\n            this._startUpload();\n            _b.label = 6;\n          case 6:\n            return [3 /*break*/, 8];\n          case 7:\n            err_3 = _b.sent();\n            if (!axios.isCancel(err_3)) {\n              logger.error('Error initializing the upload task', err_3);\n              this._emitEvent(TaskEvents.ERROR, err_3);\n            }\n            return [3 /*break*/, 8];\n          case 8:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSS3UploadTask.prototype.resume = function () {\n    if (this.state === AWSS3UploadTaskState.CANCELLED) {\n      logger.warn('This task has already been cancelled');\n    } else if (this.state === AWSS3UploadTaskState.COMPLETED) {\n      logger.warn('This task has already been completed');\n    } else if (this.state === AWSS3UploadTaskState.IN_PROGRESS) {\n      logger.warn('Upload task already in progress');\n      // first time running resume, find any cached parts on s3 or start a new multipart upload request before\n      // starting the upload\n    } else if (!this.uploadId) {\n      this._initializeUploadTask();\n    } else {\n      this._startUpload();\n    }\n  };\n  AWSS3UploadTask.prototype._startUpload = function () {\n    this.state = AWSS3UploadTaskState.IN_PROGRESS;\n    for (var i = 0; i < this.queueSize; i++) {\n      this._startNextPart();\n    }\n  };\n  AWSS3UploadTask.prototype._cancel = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var err_4;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!(this.state === AWSS3UploadTaskState.CANCELLED)) return [3 /*break*/, 1];\n            logger.warn('This task has already been cancelled');\n            return [2 /*return*/, false];\n          case 1:\n            if (!(this.state === AWSS3UploadTaskState.COMPLETED)) return [3 /*break*/, 2];\n            logger.warn('This task has already been completed');\n            return [2 /*return*/, false];\n          case 2:\n            this.pause();\n            this.queued = [];\n            this.completedParts = [];\n            this.bytesUploaded = 0;\n            this.state = AWSS3UploadTaskState.CANCELLED;\n            _a.label = 3;\n          case 3:\n            _a.trys.push([3, 6,, 7]);\n            return [4 /*yield*/, this.s3client.send(new AbortMultipartUploadCommand({\n              Bucket: this.params.Bucket,\n              Key: this.params.Key,\n              UploadId: this.uploadId\n            }))];\n          case 4:\n            _a.sent();\n            return [4 /*yield*/, this._removeFromCache()];\n          case 5:\n            _a.sent();\n            return [2 /*return*/, true];\n          case 6:\n            err_4 = _a.sent();\n            logger.error('Error cancelling upload task', err_4);\n            return [2 /*return*/, false];\n          case 7:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * pause this particular upload task\n   **/\n  AWSS3UploadTask.prototype.pause = function () {\n    var _a;\n    if (this.state === AWSS3UploadTaskState.CANCELLED) {\n      logger.warn('This task has already been cancelled');\n    } else if (this.state === AWSS3UploadTaskState.COMPLETED) {\n      logger.warn('This task has already been completed');\n    } else if (this.state === AWSS3UploadTaskState.PAUSED) {\n      logger.warn('This task is already paused');\n    }\n    this.state = AWSS3UploadTaskState.PAUSED;\n    // Use axios cancel token to abort the part request immediately\n    // Add the inProgress parts back to pending\n    var removedInProgressReq = this.inProgress.splice(0, this.inProgress.length);\n    removedInProgressReq.forEach(function (req) {\n      req.cancel(AWSS3ProviderUploadErrorStrings.UPLOAD_PAUSED_MESSAGE);\n    });\n    // Put all removed in progress parts back into the queue\n    (_a = this.queued).unshift.apply(_a, __spread(removedInProgressReq.map(function (req) {\n      return req.uploadPartInput;\n    })));\n  };\n  return AWSS3UploadTask;\n}();\nexport { AWSS3UploadTask };","map":{"version":3,"names":["__awaiter","__generator","__read","__spread","UploadPartCommand","CompleteMultipartUploadCommand","AbortMultipartUploadCommand","ListPartsCommand","CreateMultipartUploadCommand","ListObjectsV2Command","axios","Logger","calculatePartSize","DEFAULT_PART_SIZE","DEFAULT_QUEUE_SIZE","MAX_OBJECT_SIZE","byteLength","isFile","AWSS3ProviderUploadErrorStrings","SET_CONTENT_LENGTH_HEADER","UPLOADS_STORAGE_KEY","logger","AWSS3UploadTaskState","TaskEvents","comparePartNumber","a","b","PartNumber","AWSS3UploadTask","_a","s3Client","file","emitter","storage","params","level","prefixPromise","queueSize","partSize","inProgress","completedParts","queued","bytesUploaded","totalBytes","state","INIT","s3client","middlewareStack","remove","storageSync","Promise","resolve","size","fileId","_getFileId","_validateParams","on","ERROR","Object","defineProperty","prototype","get","enumerable","configurable","IN_PROGRESS","_listSingleFile","key","bucket","listObjectRes","_b","Contents","prefix","obj","_c","label","send","Bucket","Prefix","sent","find","o","Key","name","lastModified","type","join","_findCachedUploadParts","uploadRequests","cachedUploadFileData","listPartsOutput","_listCachedUploadTasks","keys","length","hasOwnProperty","call","parts","uploadId","lastTouched","Date","now","setItem","JSON","stringify","UploadId","Parts","_emitEvent","event","payload","emit","Error","tasks","getItem","parse","_cache","fileMetadata","_isCached","apply","_removeFromCache","_onPartUploadCompletion","eTag","partNumber","chunk","push","ETag","UPLOAD_PROGRESS","loaded","total","filter","job","uploadPartInput","PAUSED","_startNextPart","_isDone","_completeUpload","err_1","trys","MultipartUpload","sort","_verifyFileSize","UPLOAD_COMPLETE","COMPLETED","error","_makeUploadPartRequest","input","cancelTokenSource","res","err_2","Body","log","CANCELLED","isCancel","message","UPLOAD_PAUSED_MESSAGE","pause","CancelToken","source","nextPart","shift","s3Request","cancel","valid","e_1","Boolean","Size","_createParts","bodyStart","bodyEnd","Math","min","slice","_initCachedUploadParts","cachedParts","reduce","acc","part","uploadedPartNumSet","Set","map","has","_initMultipartUpload","fileName","File","_initializeUploadTask","err_3","_startUpload","resume","warn","i","_cancel","err_4","removedInProgressReq","splice","forEach","req","unshift"],"sources":["/Users/macbook/Documents/Chatapp/temp-repo-chatbot/frontend/node_modules/@aws-amplify/storage/lib-esm/providers/AWSS3UploadTask.js"],"sourcesContent":["import { __awaiter, __generator, __read, __spread } from \"tslib\";\nimport { UploadPartCommand, CompleteMultipartUploadCommand, AbortMultipartUploadCommand, ListPartsCommand, CreateMultipartUploadCommand, ListObjectsV2Command, } from '@aws-sdk/client-s3';\nimport axios from 'axios';\nimport { Logger } from '@aws-amplify/core';\nimport { calculatePartSize, DEFAULT_PART_SIZE, DEFAULT_QUEUE_SIZE, MAX_OBJECT_SIZE, } from '../common/S3ClientUtils';\nimport { byteLength, isFile } from '../common/StorageUtils';\nimport { AWSS3ProviderUploadErrorStrings } from '../common/StorageErrorStrings';\nimport { SET_CONTENT_LENGTH_HEADER, UPLOADS_STORAGE_KEY, } from '../common/StorageConstants';\nvar logger = new Logger('AWSS3UploadTask');\nexport var AWSS3UploadTaskState;\n(function (AWSS3UploadTaskState) {\n    AWSS3UploadTaskState[AWSS3UploadTaskState[\"INIT\"] = 0] = \"INIT\";\n    AWSS3UploadTaskState[AWSS3UploadTaskState[\"IN_PROGRESS\"] = 1] = \"IN_PROGRESS\";\n    AWSS3UploadTaskState[AWSS3UploadTaskState[\"PAUSED\"] = 2] = \"PAUSED\";\n    AWSS3UploadTaskState[AWSS3UploadTaskState[\"CANCELLED\"] = 3] = \"CANCELLED\";\n    AWSS3UploadTaskState[AWSS3UploadTaskState[\"COMPLETED\"] = 4] = \"COMPLETED\";\n})(AWSS3UploadTaskState || (AWSS3UploadTaskState = {}));\nexport var TaskEvents;\n(function (TaskEvents) {\n    TaskEvents[\"CANCEL\"] = \"cancel\";\n    TaskEvents[\"UPLOAD_COMPLETE\"] = \"uploadComplete\";\n    TaskEvents[\"UPLOAD_PROGRESS\"] = \"uploadPartProgress\";\n    TaskEvents[\"ERROR\"] = \"error\";\n})(TaskEvents || (TaskEvents = {}));\nfunction comparePartNumber(a, b) {\n    return a.PartNumber - b.PartNumber;\n}\nvar AWSS3UploadTask = /** @class */ (function () {\n    function AWSS3UploadTask(_a) {\n        var s3Client = _a.s3Client, file = _a.file, emitter = _a.emitter, storage = _a.storage, params = _a.params, level = _a.level, prefixPromise = _a.prefixPromise;\n        this.queueSize = DEFAULT_QUEUE_SIZE;\n        this.partSize = DEFAULT_PART_SIZE;\n        this.inProgress = [];\n        this.completedParts = [];\n        this.queued = [];\n        this.bytesUploaded = 0;\n        this.totalBytes = 0;\n        this.state = AWSS3UploadTaskState.INIT;\n        this.prefixPromise = prefixPromise;\n        this.s3client = s3Client;\n        this.s3client.middlewareStack.remove(SET_CONTENT_LENGTH_HEADER);\n        this.storage = storage;\n        this.storageSync = Promise.resolve();\n        if (typeof this.storage['sync'] === 'function') {\n            this.storageSync = this.storage['sync']();\n        }\n        this.params = params;\n        this.file = file;\n        this.totalBytes = this.file.size;\n        this.bytesUploaded = 0;\n        this.emitter = emitter;\n        this.queued = [];\n        this.fileId = this._getFileId(level);\n        this._validateParams();\n        // event emitter will re-throw an error if an event emits an error unless there's a listener, attaching a no-op\n        // function to it unless user adds their own onError callback\n        this.emitter.on(TaskEvents.ERROR, function () { });\n    }\n    Object.defineProperty(AWSS3UploadTask.prototype, \"percent\", {\n        get: function () {\n            return (this.bytesUploaded / this.totalBytes) * 100;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AWSS3UploadTask.prototype, \"isInProgress\", {\n        get: function () {\n            return this.state === AWSS3UploadTaskState.IN_PROGRESS;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    AWSS3UploadTask.prototype._listSingleFile = function (_a) {\n        var key = _a.key, bucket = _a.bucket;\n        return __awaiter(this, void 0, void 0, function () {\n            var listObjectRes, _b, Contents, prefix, obj;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0: return [4 /*yield*/, this.s3client.send(new ListObjectsV2Command({\n                            Bucket: bucket,\n                            Prefix: key,\n                        }))];\n                    case 1:\n                        listObjectRes = _c.sent();\n                        _b = listObjectRes.Contents, Contents = _b === void 0 ? [] : _b;\n                        return [4 /*yield*/, this.prefixPromise];\n                    case 2:\n                        prefix = _c.sent();\n                        obj = Contents.find(function (o) { return o.Key === \"\" + prefix + key; });\n                        return [2 /*return*/, obj];\n                }\n            });\n        });\n    };\n    AWSS3UploadTask.prototype._getFileId = function (level) {\n        // We should check if it's a File first because File is also instance of a Blob\n        if (isFile(this.file)) {\n            return [\n                this.file.name,\n                this.file.lastModified,\n                this.file.size,\n                this.file.type,\n                this.params.Bucket,\n                level,\n                this.params.Key,\n            ].join('-');\n        }\n        else {\n            return [\n                this.file.size,\n                this.file.type,\n                this.params.Bucket,\n                level,\n                this.params.Key,\n            ].join('-');\n        }\n    };\n    AWSS3UploadTask.prototype._findCachedUploadParts = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var uploadRequests, cachedUploadFileData, listPartsOutput;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._listCachedUploadTasks()];\n                    case 1:\n                        uploadRequests = _a.sent();\n                        if (Object.keys(uploadRequests).length === 0 ||\n                            !Object.prototype.hasOwnProperty.call(uploadRequests, this.fileId)) {\n                            return [2 /*return*/, { parts: [], uploadId: null }];\n                        }\n                        cachedUploadFileData = uploadRequests[this.fileId];\n                        cachedUploadFileData.lastTouched = Date.now();\n                        this.storage.setItem(UPLOADS_STORAGE_KEY, JSON.stringify(uploadRequests));\n                        return [4 /*yield*/, this.s3client.send(new ListPartsCommand({\n                                Bucket: this.params.Bucket,\n                                Key: this.params.Key,\n                                UploadId: cachedUploadFileData.uploadId,\n                            }))];\n                    case 2:\n                        listPartsOutput = _a.sent();\n                        return [2 /*return*/, {\n                                parts: listPartsOutput.Parts || [],\n                                uploadId: cachedUploadFileData.uploadId,\n                            }];\n                }\n            });\n        });\n    };\n    AWSS3UploadTask.prototype._emitEvent = function (event, payload) {\n        this.emitter.emit(event, payload);\n    };\n    AWSS3UploadTask.prototype._validateParams = function () {\n        if (this.totalBytes > MAX_OBJECT_SIZE) {\n            throw new Error(\"File size bigger than S3 Object limit of 5TB, got \" + this.totalBytes + \" Bytes\");\n        }\n    };\n    AWSS3UploadTask.prototype._listCachedUploadTasks = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var tasks;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.storageSync];\n                    case 1:\n                        _a.sent();\n                        tasks = this.storage.getItem(UPLOADS_STORAGE_KEY) || '{}';\n                        return [2 /*return*/, JSON.parse(tasks)];\n                }\n            });\n        });\n    };\n    AWSS3UploadTask.prototype._cache = function (fileMetadata) {\n        return __awaiter(this, void 0, void 0, function () {\n            var uploadRequests;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._listCachedUploadTasks()];\n                    case 1:\n                        uploadRequests = _a.sent();\n                        uploadRequests[this.fileId] = fileMetadata;\n                        this.storage.setItem(UPLOADS_STORAGE_KEY, JSON.stringify(uploadRequests));\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSS3UploadTask.prototype._isCached = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, _b;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        _b = (_a = Object.prototype.hasOwnProperty).call;\n                        return [4 /*yield*/, this._listCachedUploadTasks()];\n                    case 1: return [2 /*return*/, _b.apply(_a, [_c.sent(),\n                            this.fileId])];\n                }\n            });\n        });\n    };\n    AWSS3UploadTask.prototype._removeFromCache = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var uploadRequests;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._listCachedUploadTasks()];\n                    case 1:\n                        uploadRequests = _a.sent();\n                        delete uploadRequests[this.fileId];\n                        this.storage.setItem(UPLOADS_STORAGE_KEY, JSON.stringify(uploadRequests));\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSS3UploadTask.prototype._onPartUploadCompletion = function (_a) {\n        var eTag = _a.eTag, partNumber = _a.partNumber, chunk = _a.chunk;\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_b) {\n                this.completedParts.push({\n                    ETag: eTag,\n                    PartNumber: partNumber,\n                });\n                this.bytesUploaded += byteLength(chunk);\n                this._emitEvent(TaskEvents.UPLOAD_PROGRESS, {\n                    loaded: this.bytesUploaded,\n                    total: this.totalBytes,\n                });\n                // Remove the completed item from the inProgress array\n                this.inProgress = this.inProgress.filter(function (job) { return job.uploadPartInput.PartNumber !== partNumber; });\n                if (this.queued.length && this.state !== AWSS3UploadTaskState.PAUSED)\n                    this._startNextPart();\n                if (this._isDone())\n                    this._completeUpload();\n                return [2 /*return*/];\n            });\n        });\n    };\n    AWSS3UploadTask.prototype._completeUpload = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var err_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 3, , 4]);\n                        return [4 /*yield*/, this.s3client.send(new CompleteMultipartUploadCommand({\n                                Bucket: this.params.Bucket,\n                                Key: this.params.Key,\n                                UploadId: this.uploadId,\n                                MultipartUpload: {\n                                    // Parts are not always completed in order, we need to manually sort them\n                                    Parts: this.completedParts.sort(comparePartNumber),\n                                },\n                            }))];\n                    case 1:\n                        _a.sent();\n                        return [4 /*yield*/, this._verifyFileSize()];\n                    case 2:\n                        _a.sent();\n                        this._emitEvent(TaskEvents.UPLOAD_COMPLETE, {\n                            key: this.params.Key,\n                        });\n                        this._removeFromCache();\n                        this.state = AWSS3UploadTaskState.COMPLETED;\n                        return [3 /*break*/, 4];\n                    case 3:\n                        err_1 = _a.sent();\n                        logger.error('error completing upload', err_1);\n                        this._emitEvent(TaskEvents.ERROR, err_1);\n                        return [3 /*break*/, 4];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSS3UploadTask.prototype._makeUploadPartRequest = function (input, cancelTokenSource) {\n        return __awaiter(this, void 0, void 0, function () {\n            var res, err_2;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 3, , 4]);\n                        return [4 /*yield*/, this.s3client.send(new UploadPartCommand(input), {\n                                cancelTokenSource: cancelTokenSource,\n                            })];\n                    case 1:\n                        res = _a.sent();\n                        return [4 /*yield*/, this._onPartUploadCompletion({\n                                eTag: res.ETag,\n                                partNumber: input.PartNumber,\n                                chunk: input.Body,\n                            })];\n                    case 2:\n                        _a.sent();\n                        return [3 /*break*/, 4];\n                    case 3:\n                        err_2 = _a.sent();\n                        if (this.state === AWSS3UploadTaskState.PAUSED) {\n                            logger.log('upload paused');\n                        }\n                        else if (this.state === AWSS3UploadTaskState.CANCELLED) {\n                            logger.log('upload aborted');\n                        }\n                        else {\n                            logger.error('error starting next part of upload: ', err_2);\n                        }\n                        // axios' cancel will also throw an error, however we don't need to emit an event in that case as it's an\n                        // expected behavior\n                        if (!axios.isCancel(err_2) &&\n                            err_2.message !== AWSS3ProviderUploadErrorStrings.UPLOAD_PAUSED_MESSAGE) {\n                            this._emitEvent(TaskEvents.ERROR, err_2);\n                            this.pause();\n                        }\n                        return [3 /*break*/, 4];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSS3UploadTask.prototype._startNextPart = function () {\n        if (this.queued.length > 0 && this.state !== AWSS3UploadTaskState.PAUSED) {\n            var cancelTokenSource = axios.CancelToken.source();\n            var nextPart = this.queued.shift();\n            this.inProgress.push({\n                uploadPartInput: nextPart,\n                s3Request: this._makeUploadPartRequest(nextPart, cancelTokenSource),\n                cancel: cancelTokenSource.cancel,\n            });\n        }\n    };\n    /**\n     * Verify on S3 side that the file size matches the one on the client side.\n     *\n     * @async\n     * @throws throws an error if the file size does not match between local copy of the file and the file on s3.\n     */\n    AWSS3UploadTask.prototype._verifyFileSize = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var valid, obj, e_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, this._listSingleFile({\n                                key: this.params.Key,\n                                bucket: this.params.Bucket,\n                            })];\n                    case 1:\n                        obj = _a.sent();\n                        valid = Boolean(obj && obj.Size === this.file.size);\n                        return [3 /*break*/, 3];\n                    case 2:\n                        e_1 = _a.sent();\n                        logger.log('Could not get file on s3 for size matching: ', e_1);\n                        // Don't gate verification on auth or other errors\n                        // unrelated to file size verification\n                        return [2 /*return*/];\n                    case 3:\n                        if (!valid) {\n                            throw new Error('File size does not match between local file and file on s3');\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSS3UploadTask.prototype._isDone = function () {\n        return (!this.queued.length &&\n            !this.inProgress.length &&\n            this.bytesUploaded === this.totalBytes);\n    };\n    AWSS3UploadTask.prototype._createParts = function () {\n        var size = this.file.size;\n        var parts = [];\n        for (var bodyStart = 0; bodyStart < size;) {\n            var bodyEnd = Math.min(bodyStart + this.partSize, size);\n            parts.push({\n                Body: this.file.slice(bodyStart, bodyEnd),\n                Key: this.params.Key,\n                Bucket: this.params.Bucket,\n                PartNumber: parts.length + 1,\n                UploadId: this.uploadId,\n            });\n            bodyStart += this.partSize;\n        }\n        return parts;\n    };\n    AWSS3UploadTask.prototype._initCachedUploadParts = function (cachedParts) {\n        this.bytesUploaded += cachedParts.reduce(function (acc, part) { return acc + part.Size; }, 0);\n        // Find the set of part numbers that have already been uploaded\n        var uploadedPartNumSet = new Set(cachedParts.map(function (part) { return part.PartNumber; }));\n        this.queued = this.queued.filter(function (part) { return !uploadedPartNumSet.has(part.PartNumber); });\n        this.completedParts = cachedParts.map(function (part) { return ({\n            PartNumber: part.PartNumber,\n            ETag: part.ETag,\n        }); });\n        this._emitEvent(TaskEvents.UPLOAD_PROGRESS, {\n            loaded: this.bytesUploaded,\n            total: this.totalBytes,\n        });\n    };\n    AWSS3UploadTask.prototype._initMultipartUpload = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var res;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.s3client.send(new CreateMultipartUploadCommand(this.params))];\n                    case 1:\n                        res = _a.sent();\n                        this._cache({\n                            uploadId: res.UploadId,\n                            lastTouched: Date.now(),\n                            bucket: this.params.Bucket,\n                            key: this.params.Key,\n                            fileName: this.file instanceof File ? this.file.name : '',\n                        });\n                        return [2 /*return*/, res.UploadId];\n                }\n            });\n        });\n    };\n    AWSS3UploadTask.prototype._initializeUploadTask = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, parts, uploadId, uploadId, err_3;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        this.state = AWSS3UploadTaskState.IN_PROGRESS;\n                        this.partSize = calculatePartSize(this.totalBytes);\n                        _b.label = 1;\n                    case 1:\n                        _b.trys.push([1, 7, , 8]);\n                        return [4 /*yield*/, this._isCached()];\n                    case 2:\n                        if (!_b.sent()) return [3 /*break*/, 4];\n                        return [4 /*yield*/, this._findCachedUploadParts()];\n                    case 3:\n                        _a = _b.sent(), parts = _a.parts, uploadId = _a.uploadId;\n                        this.uploadId = uploadId;\n                        this.queued = this._createParts();\n                        this._initCachedUploadParts(parts);\n                        this._startUpload();\n                        return [3 /*break*/, 6];\n                    case 4:\n                        if (!!this.uploadId) return [3 /*break*/, 6];\n                        return [4 /*yield*/, this._initMultipartUpload()];\n                    case 5:\n                        uploadId = _b.sent();\n                        this.uploadId = uploadId;\n                        this.queued = this._createParts();\n                        this._startUpload();\n                        _b.label = 6;\n                    case 6: return [3 /*break*/, 8];\n                    case 7:\n                        err_3 = _b.sent();\n                        if (!axios.isCancel(err_3)) {\n                            logger.error('Error initializing the upload task', err_3);\n                            this._emitEvent(TaskEvents.ERROR, err_3);\n                        }\n                        return [3 /*break*/, 8];\n                    case 8: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSS3UploadTask.prototype.resume = function () {\n        if (this.state === AWSS3UploadTaskState.CANCELLED) {\n            logger.warn('This task has already been cancelled');\n        }\n        else if (this.state === AWSS3UploadTaskState.COMPLETED) {\n            logger.warn('This task has already been completed');\n        }\n        else if (this.state === AWSS3UploadTaskState.IN_PROGRESS) {\n            logger.warn('Upload task already in progress');\n            // first time running resume, find any cached parts on s3 or start a new multipart upload request before\n            // starting the upload\n        }\n        else if (!this.uploadId) {\n            this._initializeUploadTask();\n        }\n        else {\n            this._startUpload();\n        }\n    };\n    AWSS3UploadTask.prototype._startUpload = function () {\n        this.state = AWSS3UploadTaskState.IN_PROGRESS;\n        for (var i = 0; i < this.queueSize; i++) {\n            this._startNextPart();\n        }\n    };\n    AWSS3UploadTask.prototype._cancel = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var err_4;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!(this.state === AWSS3UploadTaskState.CANCELLED)) return [3 /*break*/, 1];\n                        logger.warn('This task has already been cancelled');\n                        return [2 /*return*/, false];\n                    case 1:\n                        if (!(this.state === AWSS3UploadTaskState.COMPLETED)) return [3 /*break*/, 2];\n                        logger.warn('This task has already been completed');\n                        return [2 /*return*/, false];\n                    case 2:\n                        this.pause();\n                        this.queued = [];\n                        this.completedParts = [];\n                        this.bytesUploaded = 0;\n                        this.state = AWSS3UploadTaskState.CANCELLED;\n                        _a.label = 3;\n                    case 3:\n                        _a.trys.push([3, 6, , 7]);\n                        return [4 /*yield*/, this.s3client.send(new AbortMultipartUploadCommand({\n                                Bucket: this.params.Bucket,\n                                Key: this.params.Key,\n                                UploadId: this.uploadId,\n                            }))];\n                    case 4:\n                        _a.sent();\n                        return [4 /*yield*/, this._removeFromCache()];\n                    case 5:\n                        _a.sent();\n                        return [2 /*return*/, true];\n                    case 6:\n                        err_4 = _a.sent();\n                        logger.error('Error cancelling upload task', err_4);\n                        return [2 /*return*/, false];\n                    case 7: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * pause this particular upload task\n     **/\n    AWSS3UploadTask.prototype.pause = function () {\n        var _a;\n        if (this.state === AWSS3UploadTaskState.CANCELLED) {\n            logger.warn('This task has already been cancelled');\n        }\n        else if (this.state === AWSS3UploadTaskState.COMPLETED) {\n            logger.warn('This task has already been completed');\n        }\n        else if (this.state === AWSS3UploadTaskState.PAUSED) {\n            logger.warn('This task is already paused');\n        }\n        this.state = AWSS3UploadTaskState.PAUSED;\n        // Use axios cancel token to abort the part request immediately\n        // Add the inProgress parts back to pending\n        var removedInProgressReq = this.inProgress.splice(0, this.inProgress.length);\n        removedInProgressReq.forEach(function (req) {\n            req.cancel(AWSS3ProviderUploadErrorStrings.UPLOAD_PAUSED_MESSAGE);\n        });\n        // Put all removed in progress parts back into the queue\n        (_a = this.queued).unshift.apply(_a, __spread(removedInProgressReq.map(function (req) { return req.uploadPartInput; })));\n    };\n    return AWSS3UploadTask;\n}());\nexport { AWSS3UploadTask };\n//# sourceMappingURL=AWSS3UploadTask.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}