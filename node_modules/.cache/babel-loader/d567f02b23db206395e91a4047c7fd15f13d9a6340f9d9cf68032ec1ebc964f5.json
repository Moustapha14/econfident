{"ast":null,"code":"import { __assign, __read } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport booleanClockwise from '@turf/boolean-clockwise';\nexport function validateCoordinates(lng, lat) {\n  if (!Number.isFinite(lng) || !Number.isFinite(lat)) {\n    throw new Error(\"Invalid coordinates: [\" + lng + \",\" + lat + \"]\");\n  }\n  if (lat < -90 || 90 < lat) {\n    throw new Error('Latitude must be between -90 and 90 degrees inclusive.');\n  } else if (lng < -180 || 180 < lng) {\n    throw new Error('Longitude must be between -180 and 180 degrees inclusive.');\n  }\n}\nexport function validateGeofenceId(geofenceId) {\n  var geofenceIdRegex = /^[-._\\p{L}\\p{N}]+$/iu;\n  // Check if geofenceId is valid\n  if (!geofenceIdRegex.test(geofenceId)) {\n    throw new Error(\"Invalid geofenceId: '\" + geofenceId + \"' - IDs can only contain alphanumeric characters, hyphens, underscores and periods.\");\n  }\n}\nexport function validateLinearRing(linearRing, geofenceId) {\n  var errorPrefix = geofenceId ? geofenceId + \": \" : '';\n  // Validate LinearRing size, must be at least 4 points\n  if (linearRing.length < 4) {\n    throw new Error(errorPrefix + \"LinearRing must contain 4 or more coordinates.\");\n  }\n  // Validate all coordinates are valid, error with which ones are bad\n  var badCoordinates = [];\n  linearRing.forEach(function (coordinates) {\n    try {\n      validateCoordinates(coordinates[0], coordinates[1]);\n    } catch (error) {\n      badCoordinates.push({\n        coordinates: coordinates,\n        error: error.message\n      });\n    }\n  });\n  if (badCoordinates.length > 0) {\n    throw new Error(errorPrefix + \"One or more of the coordinates in the Polygon LinearRing are not valid: \" + JSON.stringify(badCoordinates));\n  }\n  // Validate first and last coordinates are the same\n  var _a = __read(linearRing[0], 2),\n    lngA = _a[0],\n    latA = _a[1];\n  var _b = __read(linearRing[linearRing.length - 1], 2),\n    lngB = _b[0],\n    latB = _b[1];\n  if (lngA !== lngB || latA !== latB) {\n    throw new Error(errorPrefix + \"LinearRing's first and last coordinates are not the same\");\n  }\n  if (booleanClockwise(linearRing)) {\n    throw new Error(errorPrefix + \"LinearRing coordinates must be wound counterclockwise\");\n  }\n}\nexport function validatePolygon(polygon, geofenceId) {\n  var errorPrefix = geofenceId ? geofenceId + \": \" : '';\n  if (!Array.isArray(polygon)) {\n    throw new Error(errorPrefix + \"Polygon is of incorrect structure. It should be an array of LinearRings\");\n  }\n  if (polygon.length < 1) {\n    throw new Error(errorPrefix + \"Polygon must have a single LinearRing array.\");\n  }\n  if (polygon.length > 1) {\n    throw new Error(errorPrefix + \"Polygon must have a single LinearRing array. Note: We do not currently support polygons with holes, multipolygons, polygons that are wound clockwise, or that cross the antimeridian.\");\n  }\n  var verticesCount = polygon.reduce(function (prev, linearRing) {\n    return prev + linearRing.length;\n  }, 0);\n  if (verticesCount > 1000) {\n    throw new Error(errorPrefix + \"Polygon has more than the maximum 1000 vertices.\");\n  }\n  polygon.forEach(function (linearRing) {\n    validateLinearRing(linearRing, geofenceId);\n  });\n}\nexport function validateGeofencesInput(geofences) {\n  var geofenceIds = {};\n  geofences.forEach(function (geofence) {\n    // verify all required properties are present\n    // Validate geofenceId exists\n    if (!geofence.geofenceId) {\n      throw new Error(\"Geofence '\" + geofence + \"' is missing geofenceId\");\n    }\n    var geofenceId = geofence.geofenceId;\n    validateGeofenceId(geofenceId);\n    // Validate geofenceId is unique\n    if (geofenceIds[geofenceId]) {\n      throw new Error(\"Duplicate geofenceId: \" + geofenceId);\n    } else {\n      geofenceIds[geofenceId] = true;\n    }\n    // Validate geometry exists\n    if (!geofence.geometry) {\n      throw new Error(\"Geofence '\" + geofenceId + \"' is missing geometry\");\n    }\n    var geometry = geofence.geometry;\n    // Validate polygon exists\n    if (!geometry.polygon) {\n      throw new Error(\"Geofence '\" + geofenceId + \"' is missing geometry.polygon\");\n    }\n    var polygon = geometry.polygon;\n    // Validate polygon length and structure\n    try {\n      validatePolygon(polygon, geofenceId);\n    } catch (error) {\n      if (error.message.includes('Polygon has more than the maximum 1000 vertices.')) {\n        throw new Error(\"Geofence '\" + geofenceId + \"' has more than the maximum of 1000 vertices\");\n      }\n    }\n    // Validate LinearRing length, structure, and coordinates\n    var _a = __read(polygon, 1),\n      linearRing = _a[0];\n    validateLinearRing(linearRing, geofenceId);\n  });\n}\nexport function mapSearchOptions(options, locationServiceInput) {\n  var locationServiceModifiedInput = __assign({}, locationServiceInput);\n  locationServiceModifiedInput.FilterCountries = options.countries;\n  locationServiceModifiedInput.MaxResults = options.maxResults;\n  if (options.searchIndexName) {\n    locationServiceModifiedInput.IndexName = options.searchIndexName;\n  }\n  if (options['biasPosition'] && options['searchAreaConstraints']) {\n    throw new Error('BiasPosition and SearchAreaConstraints are mutually exclusive, please remove one or the other from the options object');\n  }\n  if (options['biasPosition']) {\n    locationServiceModifiedInput.BiasPosition = options['biasPosition'];\n  }\n  if (options['searchAreaConstraints']) {\n    locationServiceModifiedInput.FilterBBox = options['searchAreaConstraints'];\n  }\n  return locationServiceModifiedInput;\n}","map":{"version":3,"names":["booleanClockwise","validateCoordinates","lng","lat","Number","isFinite","Error","validateGeofenceId","geofenceId","geofenceIdRegex","test","validateLinearRing","linearRing","errorPrefix","length","badCoordinates","forEach","coordinates","error","push","message","JSON","stringify","_a","__read","lngA","latA","_b","lngB","latB","validatePolygon","polygon","Array","isArray","verticesCount","reduce","prev","validateGeofencesInput","geofences","geofenceIds","geofence","geometry","includes","mapSearchOptions","options","locationServiceInput","locationServiceModifiedInput","__assign","FilterCountries","countries","MaxResults","maxResults","searchIndexName","IndexName","BiasPosition","FilterBBox"],"sources":["../src/util.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}