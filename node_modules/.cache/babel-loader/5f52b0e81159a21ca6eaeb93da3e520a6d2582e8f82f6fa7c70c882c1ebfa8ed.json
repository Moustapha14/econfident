{"ast":null,"code":"'use strict';\n\nconst util = require('./util');\nconst convertToJson = function (node, options, parentTagName) {\n  const jObj = {};\n\n  // when no child node or attr is present\n  if ((!node.child || util.isEmptyObject(node.child)) && (!node.attrsMap || util.isEmptyObject(node.attrsMap))) {\n    return util.isExist(node.val) ? node.val : '';\n  }\n\n  // otherwise create a textnode if node has some text\n  if (util.isExist(node.val) && !(typeof node.val === 'string' && (node.val === '' || node.val === options.cdataPositionChar))) {\n    const asArray = util.isTagNameInArrayMode(node.tagname, options.arrayMode, parentTagName);\n    jObj[options.textNodeName] = asArray ? [node.val] : node.val;\n  }\n  util.merge(jObj, node.attrsMap, options.arrayMode);\n  const keys = Object.keys(node.child);\n  for (let index = 0; index < keys.length; index++) {\n    const tagName = keys[index];\n    if (node.child[tagName] && node.child[tagName].length > 1) {\n      jObj[tagName] = [];\n      for (let tag in node.child[tagName]) {\n        if (node.child[tagName].hasOwnProperty(tag)) {\n          jObj[tagName].push(convertToJson(node.child[tagName][tag], options, tagName));\n        }\n      }\n    } else {\n      const result = convertToJson(node.child[tagName][0], options, tagName);\n      const asArray = options.arrayMode === true && typeof result === 'object' || util.isTagNameInArrayMode(tagName, options.arrayMode, parentTagName);\n      jObj[tagName] = asArray ? [result] : result;\n    }\n  }\n\n  //add value\n  return jObj;\n};\nexports.convertToJson = convertToJson;","map":{"version":3,"names":["util","require","convertToJson","node","options","parentTagName","jObj","child","isEmptyObject","attrsMap","isExist","val","cdataPositionChar","asArray","isTagNameInArrayMode","tagname","arrayMode","textNodeName","merge","keys","Object","index","length","tagName","tag","hasOwnProperty","push","result","exports"],"sources":["/Users/macbook/Documents/Chatapp/temp-repo-chatbot/frontend/node_modules/fast-xml-parser/src/node2json.js"],"sourcesContent":["'use strict';\n\nconst util = require('./util');\n\nconst convertToJson = function(node, options, parentTagName) {\n  const jObj = {};\n\n  // when no child node or attr is present\n  if ((!node.child || util.isEmptyObject(node.child)) && (!node.attrsMap || util.isEmptyObject(node.attrsMap))) {\n    return util.isExist(node.val) ? node.val : '';\n  }\n\n  // otherwise create a textnode if node has some text\n  if (util.isExist(node.val) && !(typeof node.val === 'string' && (node.val === '' || node.val === options.cdataPositionChar))) {\n    const asArray = util.isTagNameInArrayMode(node.tagname, options.arrayMode, parentTagName)\n    jObj[options.textNodeName] = asArray ? [node.val] : node.val;\n  }\n\n  util.merge(jObj, node.attrsMap, options.arrayMode);\n\n  const keys = Object.keys(node.child);\n  for (let index = 0; index < keys.length; index++) {\n    const tagName = keys[index];\n    if (node.child[tagName] && node.child[tagName].length > 1) {\n      jObj[tagName] = [];\n      for (let tag in node.child[tagName]) {\n        if (node.child[tagName].hasOwnProperty(tag)) {\n          jObj[tagName].push(convertToJson(node.child[tagName][tag], options, tagName));\n        }\n      }\n    } else {\n      const result = convertToJson(node.child[tagName][0], options, tagName);\n      const asArray = (options.arrayMode === true && typeof result === 'object') || util.isTagNameInArrayMode(tagName, options.arrayMode, parentTagName);\n      jObj[tagName] = asArray ? [result] : result;\n    }\n  }\n\n  //add value\n  return jObj;\n};\n\nexports.convertToJson = convertToJson;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,IAAI,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAE9B,MAAMC,aAAa,GAAG,SAAAA,CAASC,IAAI,EAAEC,OAAO,EAAEC,aAAa,EAAE;EAC3D,MAAMC,IAAI,GAAG,CAAC,CAAC;;EAEf;EACA,IAAI,CAAC,CAACH,IAAI,CAACI,KAAK,IAAIP,IAAI,CAACQ,aAAa,CAACL,IAAI,CAACI,KAAK,CAAC,MAAM,CAACJ,IAAI,CAACM,QAAQ,IAAIT,IAAI,CAACQ,aAAa,CAACL,IAAI,CAACM,QAAQ,CAAC,CAAC,EAAE;IAC5G,OAAOT,IAAI,CAACU,OAAO,CAACP,IAAI,CAACQ,GAAG,CAAC,GAAGR,IAAI,CAACQ,GAAG,GAAG,EAAE;EAC/C;;EAEA;EACA,IAAIX,IAAI,CAACU,OAAO,CAACP,IAAI,CAACQ,GAAG,CAAC,IAAI,EAAE,OAAOR,IAAI,CAACQ,GAAG,KAAK,QAAQ,KAAKR,IAAI,CAACQ,GAAG,KAAK,EAAE,IAAIR,IAAI,CAACQ,GAAG,KAAKP,OAAO,CAACQ,iBAAiB,CAAC,CAAC,EAAE;IAC5H,MAAMC,OAAO,GAAGb,IAAI,CAACc,oBAAoB,CAACX,IAAI,CAACY,OAAO,EAAEX,OAAO,CAACY,SAAS,EAAEX,aAAa,CAAC;IACzFC,IAAI,CAACF,OAAO,CAACa,YAAY,CAAC,GAAGJ,OAAO,GAAG,CAACV,IAAI,CAACQ,GAAG,CAAC,GAAGR,IAAI,CAACQ,GAAG;EAC9D;EAEAX,IAAI,CAACkB,KAAK,CAACZ,IAAI,EAAEH,IAAI,CAACM,QAAQ,EAAEL,OAAO,CAACY,SAAS,CAAC;EAElD,MAAMG,IAAI,GAAGC,MAAM,CAACD,IAAI,CAAChB,IAAI,CAACI,KAAK,CAAC;EACpC,KAAK,IAAIc,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGF,IAAI,CAACG,MAAM,EAAED,KAAK,EAAE,EAAE;IAChD,MAAME,OAAO,GAAGJ,IAAI,CAACE,KAAK,CAAC;IAC3B,IAAIlB,IAAI,CAACI,KAAK,CAACgB,OAAO,CAAC,IAAIpB,IAAI,CAACI,KAAK,CAACgB,OAAO,CAAC,CAACD,MAAM,GAAG,CAAC,EAAE;MACzDhB,IAAI,CAACiB,OAAO,CAAC,GAAG,EAAE;MAClB,KAAK,IAAIC,GAAG,IAAIrB,IAAI,CAACI,KAAK,CAACgB,OAAO,CAAC,EAAE;QACnC,IAAIpB,IAAI,CAACI,KAAK,CAACgB,OAAO,CAAC,CAACE,cAAc,CAACD,GAAG,CAAC,EAAE;UAC3ClB,IAAI,CAACiB,OAAO,CAAC,CAACG,IAAI,CAACxB,aAAa,CAACC,IAAI,CAACI,KAAK,CAACgB,OAAO,CAAC,CAACC,GAAG,CAAC,EAAEpB,OAAO,EAAEmB,OAAO,CAAC,CAAC;QAC/E;MACF;IACF,CAAC,MAAM;MACL,MAAMI,MAAM,GAAGzB,aAAa,CAACC,IAAI,CAACI,KAAK,CAACgB,OAAO,CAAC,CAAC,CAAC,CAAC,EAAEnB,OAAO,EAAEmB,OAAO,CAAC;MACtE,MAAMV,OAAO,GAAIT,OAAO,CAACY,SAAS,KAAK,IAAI,IAAI,OAAOW,MAAM,KAAK,QAAQ,IAAK3B,IAAI,CAACc,oBAAoB,CAACS,OAAO,EAAEnB,OAAO,CAACY,SAAS,EAAEX,aAAa,CAAC;MAClJC,IAAI,CAACiB,OAAO,CAAC,GAAGV,OAAO,GAAG,CAACc,MAAM,CAAC,GAAGA,MAAM;IAC7C;EACF;;EAEA;EACA,OAAOrB,IAAI;AACb,CAAC;AAEDsB,OAAO,CAAC1B,aAAa,GAAGA,aAAa"},"metadata":{},"sourceType":"script","externalDependencies":[]}